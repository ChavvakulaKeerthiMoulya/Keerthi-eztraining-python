RANDOM FUNCTION:
----------------------

>>> import random as r
>>> x="i love sweets"
>>> print(r.sample(x,3))
['t', 'i', 's']

>>> a=[1,2,3,4,5]
>>> r.shuffle(a)
>>> print(a)
[5, 4, 1, 3, 2]

>>> a
[5, 4, 1, 3, 2]
>>> print(a)
[5, 4, 1, 3, 2]

>>> print(r.choice(a))
2

>>> b=[1,2,3,4,5,6]
>>> print(r.choice(b))
3

>>> c="welcome back"
>>> print(r.choice(c))
w

>>> a=r.random()
>>> print(a)
0.3216948924869155

>>> g=[10,20,30,40,50]
>>> print(r.choices(g,k=4))
[50, 10, 50, 30]

>>> print(r.choices(g,k=20))
[50, 50, 40, 30, 10, 50, 10, 20, 50, 20, 40, 50,
 10, 40, 20, 40, 20, 40, 50, 20]

>>> print(r.randint(10,50))
38

>>> print(r.uniform(5,10))
9.520380648649276


===============================================================

to find out all functions:
-------------------------
>>> z=dir(r)
>>> print(z)
['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random',
 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', '_BuiltinMethodType',
 '_MethodType', '_Sequence', '_Set', '__all__', '__builtins__', 
'__cached__', '__doc__', '__file__', '__loader__', '__name__',
'__package__', '__spec__', '_acos', '_bisect', '_ceil', '_cos', 
'_e', '_exp', '_inst', '_itertools', '_log', '_pi', '_random', 
'_sha512', '_sin', '_sqrt', '_test', '_test_generator',
 '_urandom', '_warn', 'betavariate', 'choice', 'choices', 
'expovariate', 'gammavariate', 'gauss', 'getrandbits', 
'getstate', 'lognormvariate', 'normalvariate', 'paretovariate', 
'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 
'shuffle', 'triangular', 'uniform', 'vonmisesvariate',
 'weibullvariate']

================================================================

calendar:
------------

import calendar
print("full calendar")
print(calendar.calendar(2023))
print("particular month")
print(calendar.month(2023,2))
print("set first day of the week")
calendar.setfirstdayweekday(calendar.friday)
print(calendar.month(2023,1))

=================================================================

display date and time:
-------------------------

import datetime

a=datetime.datetime.now()
print(a)

sv=a.strftime("%y")#lower case
fv=a.strftime("%Y")#upper case

print("year short version:",sv)
print("year full version:",fv)

o/p:
----
2023-02-03 10:17:48.227658
year short version: 23
year full version: 2023

=================================================================
definition or description:
--------------------------
1.function without argument and without return value:

def sample():
    print("have a great time")
    print("on vacation")
sample()

print("today")
sample()

o/p:

have a great time
on vacation
today
have a great time
on vacation

---------------------------------------------------------------
product of 3 numbers:
------------------------
#type-1:
---------
1.function without argument and without return value:

def multi():
    n1,n2,n3=list(map(int,input("enter numbers:").split()))
    prod=n1*n2*n3
    print(prod)
multi()

o/p:
enter numbers:3 5 6
90

#type-2:
--------
2.function without argument and with return value:

def multi():
    n1,n2,n3=list(map(int,input("enter numbers:").split()))
    prod=n1*n2*n3
    return prod
res=multi()
print(res)

o/p:
enter numbers:3 2 1 
6

#type-3:
--------
3.function with argument and with return value:

def multi(n1,n2,n3):
    prod=n1*n2*n3
    return prod
res=multi(4,2,1)
print(res)

o/p:
8
--------------------
#user input:
def multi(a,b,c):
    prod=a*b*c
    return prod
    
n1,n2,n3=list(map(int,input("enter numbers:").split()))
res1=multi(n1,n2,n3)
print(res1)

o/p:
enter numbers:32 1 10
320


#type-4:
--------
4.function with argument and without return value:

def multi(n1,n2,n3):
    prod=n1*n2*n3
    print(prod)
multi(3,4,5)

o/p:
60
---------------------
#user input:
def multi(a,b,c):
    prod=a*b*c
    print(prod)
    
n1,n2,n3=list(map(int,input("enter numbers:").split()))
multi(n1,n2,n3)

o/p:
enter numbers: 4 10 2
80

================================================================
1.7 lemons for each 3 temples program using type-1

def lemons():
    n=int(input("number of lemons:"))
    print(n)
    if n==21:
        print("sufficient")
    elif n>21:
        print("more left",n-21)
    else:
        print("need more",21-n)
lemons()

o/p:

number of lemons:21
21
sufficient

number of lemons:23
23
more left 2

===============================================================
3.print multiplication of table in type-4

def multi(n):
    for i in range(1,11):
        print(i,'x',n,'=',i*n)
n=int(input("enter number:"))
multi(n)

o/p:
enter number:9
1 x 9 = 9
2 x 9 = 18
3 x 9 = 27
4 x 9 = 36
5 x 9 = 45
6 x 9 = 54
7 x 9 = 63
8 x 9 = 72
9 x 9 = 81
10 x 9 = 90
===============================================================
2.find factors of the given number using function type-2

def factors(n):
    for i in range(1,n+1):
        if n%i==0:
            print(i)
n=int(input("enter number:"))
factors(n)

o/p:
enter number:65
1
5
13
65

================================================================
4.find out sum of digits of the number using type -3

def digits(n):
    sum=0
    for d in str(n):
        sum=sum+int(d)
    return sum
n=int(input("enter number:"))
sd=digits(n)
print(sd)

o/p:
enter number:3566547
36
--------------------------------
#2 by remainder

def digits(n):
    sum=0
    while n!=0:
        rem=n%10
        sum=sum+rem
        n=n//10
    return sum
n=int(input("enter number:"))
sd=digits(n)
print(sd)

o/p:
enter number:24678913
40

================================================================
program:factorial by recursion
---------------------------------------------------------------

def fact(n):
    if n==0:
        return 1
    return n*fact(n-1)
n=int(input("enter a number:"))
res=fact(n)
print(res)

o/p:
enter a number:0
1

enter a number:9
362880

===============================================================
fibonacci:
------------
n=int(input("enter number:"))
a=0
b=1
sum=0
count=1

while count<=n:
    print(sum,end=" ")
    count+=1
    a=b
    b=sum
    sum=a+b

o/p:
enternumber:6
0 1 1 2 3 5 

enter number:9
0 1 1 2 3 5 8 13 21 

=================================================================
add&sub by def:
---------------

def add_sub(x,y):
    sub=x-y
    add=x+y
    return sub,add
r1,r2=add_sub(20,10)
print(r1,r2)

o/p:
10 30

================================================================
neon number:
-------------

def neon(n):
    sum=0
    sq=n*n
    while(sq!=0):
        s=sq%10
        sum=sum+s
        sq=sq//10
    if sum==n:
        print("neon number")
    else:
        print("not a neon number")
a=int(input("enter a number:"))
neon(a)

o/p:
enter a number:6
not a neon number

===============================================================
variable length method:
-------------------------

def sum(*a):
    c=0
    for i in a:
        c=c+i
    print(c)
sum(10,2,3,5,9,1)

o/p:
30

================================================================








