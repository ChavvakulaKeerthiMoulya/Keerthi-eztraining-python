#happy numbers:
---------------
#4,16,37,58,89,145--not a happy numbers

def happy(n):
    s=r=0
    while(n>=0):
        for i in range(0,len(str(n))+1):
            r=n%10
            s=s+r**2
            n=n//10
        return s
n=int(input("Enter the num:"))
res=n
while(res!=1 and res!=4):
    res=happy(res)
if res==1:
    print("happy number")
else:
    print("Not a happy number")
===============================================================
encapsulation:
--------------

#protected:
class encap:
    _a=10
    c=20
    def encapfunction(self):
        _b=200
        print("Encap function-accessing protected")
        print(self._a+10)
obj=encap()
print(obj._a)
obj.encapfunction()
print(obj.c)
o/p:
---
10
Encap function-accessing protected
20
20

---------------------------------------------
#private:
class encap:
    __a=10
    print(__a)
    def encapfunction(self):
        print("encap function")
        print(self.__a)
obj=encap()
obj.encapfunction()
print(obj.__a)
o/p:
----
10
encap function
10
Traceback (most recent call last):
  File "C:/Users/HP/OneDrive/Desktop/CRT/phase2 DAY-2/
encapsulation.py", line 23, in <module>
    print(obj.__a)
AttributeError: 'encap' object has no attribute '__a'
===============================================================
polymorphism:
--------------
#method overloading

class moverload:
    def display(self,a=None,b=None):
        print(a,b)
obj=moverload()
print("without arguments")
obj.display()

print("with all arguments")
obj.display(12,40)

print("with one argument")
obj.display(14)
o/p:
---
without arguments
None None
with all arguments
12 40
with one argument
14 None
------------------------------------------
#overriding:
---------------
#1
class parent():
    #constructor
    def __init__(self):
        self.value="inside parent"
    #parent's show method
    def show(self):
        print(self.value)
#defining child class
class child(parent):
    #constructor
    def __init__(self):
        self.value="inside child"
    #child's show method
    def show(self):
        print(self.value)
obj1=parent()
obj2=child()
obj1.show()
obj2.show()
o/p:
----
inside parent
inside child

#2

class vijayawada():
    def placename(self):
        print("vijayawada placename is klu")
    def student(self):
        print("yes-vijayawada")
    def which_year(self):
        print("3rd year")
class hyd():
    def placename(self):
        print("hyd placename is klu")
    def student(self):
        print("yes-hyd")    
    def which_year(self):
        print("3rd year-hyd")
obj_vij=vijayawada()
obj_hyd=hyd()
for details in (obj_vij,obj_hyd):
    details.placename()
    details.student()
    details.which_year()
o/p:
---
vijayawada placename is klu
yes-vijayawada
3rd year
hyd placename is klu
yes-hyd
3rd year-hyd
==========================================================
linkedlist_single:
-------------------
#creating node-declaration & definition
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelinkedlist:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("linked list is empty")
        else:
            temp=self.head   #temp=first node
            while temp:
                print(temp.data,"->",end=" ")
                #temp.data means first node is data
                temp=temp.next#establishing link
obj=singlelinkedlist()
#Node Creation- initialising
n=node(10)    #so n.data in node class will be 10    
obj.head=n    #assigning first node as head
n1=node(20)
obj.head.next=n1   #next node value
n2=node(30)
n1.next=n2
obj.display()

o/p:
----
10 -> 20 -> 30 -> 

--------------------------------------------------------------
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelinkedlist:
    def __init__(self):
        self.head=None
    def display(self):
        if self.head is None:
            print("linked list is empty")
        else:
            temp=self.head  
            while temp:
                print(temp.data," ",end=" ")
                temp=temp.next
obj=singlelinkedlist()
n=node("W")        
obj.head=n   
n1=node("I")
obj.head.next=n1   
n2=node("N")
n1.next=n2
n3=node("N")
n2.next=n3
n4=node("E")
n3.next=n4
n5=node("R")
n4.next=n5
obj.display()

o/p:
---
W   I   N   N   E   R 

#print(temp.data,"->",end=" ")
W -> I -> N -> N -> E -> R -> 

#print(temp.data,end=" ")
W I N N E R 
--------------------------------------------------------
insert beginning:
-----------------
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelinkedlist:
    def __init__(self):
        self.head=None
    def insert_beginning(self,data):
        nb=node(data)
        nb.next=self.head
        self.head=nb
    def display(self):
        if self.head is None:
            print("linked list is empty")
        else:
            temp=self.head  
            while temp:
                print(temp.data," ",end=" ")
                temp=temp.next
obj=singlelinkedlist()
n=node(10)        
obj.head=n   
n1=node(20)
n.next=n1   
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("before inserting 100")
obj.display()
print("")
print("after inserting 100")
obj.insert_beginning(100)
obj.display()
print("")
print("after inserting 555")
obj.insert_beginning(555)
obj.display()

o/p:
----
before inserting 100
10   20   30   40   50   
after inserting 100
100   10   20   30   40   50   
after inserting 555
555   100   10   20   30   40   50 

-----------------------------------------------------------
insert end:
----------
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelinkedlist:
    def __init__(self):
        self.head=None
    def insert_end(self,data):
        ne=node(data)
        temp=self.head
        while temp.next:
            temp=temp.next
        temp.next=ne
    def display(self):
        if self.head is None:
            print("linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data," ",end=" ")
                temp=temp.next
obj=singlelinkedlist()
n=node(10)
obj.head=n
n1=node(20)
n.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("before inserting 100")
obj.display()
print("")
print("after inserting 100")
obj.insert_end(100)
obj.display()
print("")
print("after inserting 200")
obj.insert_end(200)
obj.display()

o/p:
----
before inserting 100
10   20   30   40   50   
after inserting 100
10   20   30   40   50   100   
after inserting 200
10   20   30   40   50   100   200 
----------------------------------------------------------
insert position:
----------------
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class singlelinkedlist:
    def __init__(self):
        self.head=None
    def insert_position(self,pos,data):
        np=node(data)
        temp=self.head
        for i in range(pos-1):
            temp=temp.next
        np.next=temp.next
        temp.next=np
    def display(self):
        if self.head is None:
            print("linked list is empty")
        else:
            temp=self.head
            while temp:
                print(temp.data," ",end=" ")
                temp=temp.next
obj=singlelinkedlist()
n=node(10)
obj.head=n
n1=node(20)
n.next=n1
n2=node(30)
n1.next=n2
n3=node(40)
n2.next=n3
n4=node(50)
n3.next=n4
print("before inserting 100")
obj.display()
print("")
print("after inserting 100")
obj.insert_position(2,1000)
obj.display()

o/p:
----
before inserting 100
10   20   30   40   50   
after inserting 100
10   20   1000   30   40   50 
-----------------------------------------------------------
linkedlist user input:
-----------------------
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class linkedlist:
    def __init__(self):
        self.head=None
        self.last_node=None
    def append(self,data):
        if self.last_node is None:
            self.head=node(data)
            self.last_node=self.head
        else:
            self.last_node.next=node(data)
            self.last_node=self.last_node.next
    def display(self):
        current=self.head
        while current is not None:
            print(current.data,end=" ")
            current=current.next
a_llist=linkedlist()
n=int(input("how many elements would you like to have:"))
for i in range(n):
    data=int(input("enter data item:"))
    a_llist.append(data)
print("the linked list:",end="")
a_llist.display()

o/p:
----
how many elements would you like to have:4
enter data item:56
enter data item:65
enter data item:09
enter data item:345
the linked list:56 65 9 345
===============================================================
